//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.08.01 at 01:25:50 PM CEST 
//


package org.slzdevsnp.binding.tmtrading;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;


/**
 * 
 * Used to list exchange specific attributes of the product. The product attributes are given as key-value pairs.
 * 
 * | Key                                 | Value          | Prod Type                  | Description                                                                                     |
 * |-------------------------------------|----------------|----------------------------|-------------------------------------------------------------------------------------------------|
 * | isin                                | true           | FUT                        | The product has an ISIN.                                                                        |
 * | isinValue                           |                | FUT                        | The value of the ISIN.                                                                          |
 * | blockOrderProduct                   | true           | COM                        | User defined block orders are allowed for this product.                                         |
 * | blockMaximumHours                   |                | COM                        | Defines how many base contracts may be grouped together for user defined blocks.                |
 * | dstBlockProduct                     | true           | COM                        | Defines the treatment of contracts during the 25 hour DST switch.                               |
 * | crossBorderProduct                  | true           | all                        | The product is traded on the Consolidated Order Book.                                           |
 * | icebergOrderProduct                 | true           | all                        | Iceberg orders are supported for this product.                                                  |
 * | icebergMinPeakSize                  | true           | all                        | The minimum peak size of an iceberg order                                                       |
 * | icebergPriceDeltaRange              | true           | all                        | The maximum value for the peak price delta of an iceberg order.                                 |
 * | stopOrderProduct                    | true           | FUT,  	CRO                 | The product supports stop orders.                                                               |
 * | indicativeOrderProduct              | true           | FUT, 	CRO                 | Indicative orders are supported for this product.                                               |
 * | linkedOrderProduct                  | true           | all                        | Orders can be linked together for this product.                                                 |
 * | quoteOrderProduct                   | true           | FUT, 	CRO                 | Quotes are supported for this product.                                                          |
 * | quoteMinQuantity                    |                | FUT, 	CRO                 | Defines the minimum quantity that a quote is allowed to have.                                   |
 * | otcAllowed                          | true           | all                        | OTC trade registration is allowed for this product.                                             |
 * | otcOnly                             | true           | all                        | The product is for OTC trading only.                                                            |
 * | onExchangePrearrangedTrade          | true           | FUT, 	CRO                 | The product supports on-exchange prearrange trades.                                             |
 * | privateAndConfidential              | true           | FUT, 	CRO                 | Private and confidential trades are allowed for the product.                                    |
 * | volatilityInterruption              | true           | FUT, 	CRO                 | Volatility interrupt is relevant for the product.                                               |
 * | volatilityPrice                     |                | FUT, 	CRO                 | Defines the percentage of the price above which volatility interrupt is triggered.              |
 * | commodityLimitEnabled               | true           | COM                        | The commodity limit is enabled for the product.                                                 |
 * | intraProductSpreads                 | true           | FUT, 	CRO                 | The product supports intra-product spreads.                                                     |
 * | intraProductSpreadContractCount     |                | FUT, 	CRO                 | Defines how many contracts are used for intra-product spreads.                                  |
 * | productIsWithinDelivery             | true           | COM                        | Trading of the product is allowed when delivery has started.                                    |
 * | leadTime                            |                | COM                        | Defines the lead time in minutes for products within delivery.                                  |
 * | autoOrderMatcher                    | true           | all                        | The product uses the automatcher (regular price-time priority matcher)                          |
 * | liftOrderMatcher                    | true           | FUT, 	CRO                 | The product is associated with the Hit and Lift matcher.                                        |
 * | continuousAONProduct                | true           | COM                        | AON orders are supported in continuous trading for this product.                                |
 * | productCommodityId                  |                | COM                        |                                                                                                 |
 * | referencePrice                      |                | all                        | The initial reference price of the product.                                                     |
 * | clgHouses                           | true/false     | all                        | The product matcher has clearing house restrictions                                             |
 * | crossProductMatchingEnabled         | true           | all                        | Defines if orders referencing contracts of different product can be matched against each other. |
 * | tradeDecomposition                  | true           | all                        | Defines if trade decomposition based on referenced base product shall be executed.              |
 * | groupName                           |                | all                        | The product group name                                                                          |
 * | aotEnabled                          | true           | COM - Linked products only | An automated order transfer for the linked product is enabled.                                  |
 *             
 * 
 * <p>Java class for ProdCfg complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ProdCfg">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="cfgKey" use="required" type="{http://www.deutsche-boerse.com/m7/v6}stringType255" />
 *       &lt;attribute name="cfgVal" use="required" type="{http://www.deutsche-boerse.com/m7/v6}stringType255" />
 *       &lt;anyAttribute processContents='lax'/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ProdCfg")
public class ProdCfg {

    @XmlAttribute(name = "cfgKey", required = true)
    protected String cfgKey;
    @XmlAttribute(name = "cfgVal", required = true)
    protected String cfgVal;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the cfgKey property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCfgKey() {
        return cfgKey;
    }

    /**
     * Sets the value of the cfgKey property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCfgKey(String value) {
        this.cfgKey = value;
    }

    /**
     * Gets the value of the cfgVal property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCfgVal() {
        return cfgVal;
    }

    /**
     * Sets the value of the cfgVal property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCfgVal(String value) {
        this.cfgVal = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

}
